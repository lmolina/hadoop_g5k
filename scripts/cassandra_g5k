#!/usr/bin/env python

# Based on the spark_5k created by the hadoop_5k authors
# from https://github.com/mliroz/hadoop_g5k
# Laudin Alessandro Molina <laudin.molina@gmail.com>

import os
import sys

from argparse import ArgumentParser, RawTextHelpFormatter
from execo import Host

from execo.log import style
from execo_engine import logger

from hadoop_g5k.ecosystem.cassandra import CassandraCluster
from hadoop_g5k.util import generate_hosts
from hadoop_g5k.serialization import generate_new_id, \
    get_default_id, deserialize_cluster, remove_cluster, serialize_cluster, \
    cluster_exists, link_to_hadoop_cluster


if __name__ == "__main__":

    prog = "cassandra_g5k"
    description = "This tool helps you to manage a Cassandra cluster in Grid5000."
    parser = ArgumentParser(prog=prog,
                            description=description,
                            formatter_class=RawTextHelpFormatter,
                            add_help=False)

    actions = parser.add_argument_group(style.host("General options"),
                                        "Options to be used generally "
                                        "with Cassandra actions.")

    actions.add_argument("-h", "--help",
                         action="help",
                         help="Show this help message and exit")

    actions.add_argument("--id",
                         action="store",
                         nargs=1,
                         metavar="ID",
                         help="The identifier of the cluster. If not indicated"
                                ", last used cluster will be used (if any)")

    verbose_group = actions.add_mutually_exclusive_group()

    verbose_group.add_argument("-v", "--verbose",
                               dest="verbose",
                               action="store_true",
                               help="Run in verbose mode")

    verbose_group.add_argument("-q", "--quiet",
                               dest="quiet",
                               action="store_true",
                               help="Run in quiet mode")

    object_group = parser.add_argument_group(style.host("Object management "
                                                        "options"),
                                             "Options to create and destroy "
                                             "Cassandra cluster objects")

    object_mutex_group = object_group.add_mutually_exclusive_group()

    object_mutex_group.add_argument("--create",
                                    dest="create",
                                    action="store_true",
                                    help="Create the cluster object with the "
                                    "given mode")

    object_mutex_group.add_argument("--delete",
                                    dest="delete",
                                    action="store_true",
                                    help="Remove all files used by the cluster")

    object_group.add_argument("--properties",
                              metavar="INI",
                              dest="properties",
                              nargs=1,
                              action="store",
                              help="File containing the properties to be used "
                              "(INI file). Applies only to --create")

    object_group.add_argument("--nodes",
                              metavar="MACHINELIST",
                              dest="nodes",
                              nargs=1,
                              action="store",
                              help="Use the nodes in MACHINELIST file. Applies "
                                   "only to --create")

    object_group.add_argument("--bootstrap",
                              nargs=1,
                              action="store",
                              help="Install Cassandra in the cluster nodes taking"
                                   " into account the specified properties.\n"
                                   "CASSANDRA_TAR defines the path of the .tgz file"
                                   " containing Cassandra binaries.")

    actions = parser.add_argument_group(style.host("Cassandra actions"),
                                        "Actions to execute in the Cassandra "
                                        "cluster. Several options can be "
                                        "indicated at the same time.\n"
                                        "The order of execution is fixed no "
                                        "matter the order used in the "
                                        "arguments: it follows the order\n"
                                        "of the options.")

    actions.add_argument("--initialize",
                         dest="initialize",
                         action="store_true",
                         help="Initialize cluster: Copy configuration")

    actions.add_argument("--start",
                         dest="start",
                         action="store_true",
                         help="Start the master and slaves")

    actions.add_argument("--stop",
                         dest="stop",
                         action="store_true",
                         help="Stop the nodes")

    actions.add_argument("--clean",
                         dest="clean",
                         action="store_true",
                         help="Remove files created by Cassandra")


    args = parser.parse_args()

    # Get id
    if args.id:
        sc_id = int(args.id[0])
    else:
        if args.create:
            sc_id = generate_new_id(CassandraCluster.get_cluster_type())
        else:
            sc_id = get_default_id(CassandraCluster.get_cluster_type())
            if not sc_id:
                logger.error("There is no available cluster. You must create a"
                             " new one")
                sys.exit(os.EX_DATAERR)

    logger.info("Using id = " + str(sc_id) + " (Cassandra)")

    verbose = True
    if args.quiet:
        verbose = False

    # Create or load object
    if args.create:
        if not args.nodes:
            logger.error("Nodes in the cluster must be specified")
            sys.exit(os.EX_USAGE)

        if cluster_exists(CassandraCluster.get_cluster_type(), sc_id):
            logger.error("There is a Cassandra cluster with that id. You must "
                         "remove it before or chose another id")
            sys.exit(os.EX_DATAERR)

        hosts = generate_hosts(args.nodes[0])

        # FIXME: take the configuration file from the arguments
        config_file = None
        sc = CassandraCluster(hosts=hosts, config_file=config_file)

    elif args.delete:

        # Clean
        sc = deserialize_cluster(CassandraCluster.get_cluster_type(), sc_id)
        if sc.initialized:
            logger.warn("The cluster needs to be cleaned before removed.")
            sc.clean()

        # Remove sc dump file
        logger.info("Removing Cassandra Cluster dump file from cluster")
        remove_cluster(CassandraCluster.get_cluster_type(), sc_id)

        sys.exit(os.EX_OK)
    else:

        # Deserialize
        sc = deserialize_cluster(CassandraCluster.get_cluster_type(), sc_id)

    # Execute options
    if args.bootstrap:
        sc.bootstrap(args.bootstrap[0])

    if args.initialize:
        sc.initialize()

    if args.start:
        sc.start()

    if args.stop:
        sc.stop()

    if args.clean:
        sc.clean()

    serialize_cluster(CassandraCluster.get_cluster_type(), sc_id, sc)
